//@author: a0110574n



	/**
	 * origin: E:\NUS\Modules\2014-2015 SEM1\CS2103T\Project\main\Project\edu\nus\comp\cs2103t\taskerino\common\Assist.java
	 */

package edu.nus.comp.cs2103t.taskerino.common;

/**
 *
 * 
 * This class contains all the text for the various help commands.
 */

import java.util.ArrayList;

public class Assist {
	
	private static final String TITLE_GENERALHELP = "HELP";
	
	private static final String TITLE_HELP_ADD = "HELP ADD";
	
	private static final String TITLE_HELP_DELETE = "HELP DELETE";
	
	private static final String TITLE_HELP_CHANGE = "HELP CHANGE";
	
	private static final String TITLE_HELP_COMPLETE = "HELP COMPLETE";
	
	private static final String TITLE_HELP_SEARCH = "HELP SEARCH";
	
	private static final String TITLE_HELP_GOTO = "HELP GOTO";
	
	private static final String MESSAGE_GENERALHELP = "\nFor more information on a specific command, type \"help command-name\" \n\n\n"
													+ "1. add - Adds a task to the task list. Supports floating, deadline and timed tasks \n\n"
													+ "2. delete - Removes a task from the task list. \n\n"
													+ "3. change - Changes the details of the task. \n\n"
													+ "4. complete - Marks task as completed. \n\n"
													+ "5. search - Searches based on user input displays relevant tasks. \n\n"
													+ "6. undo - Undo the latest change made to the task list. \n\n"
													+ "7. goto - Switches display to the list of tasks with specified tag. \n";
	private static final String MESSAGE_HELP_ADD = "\nAdds tasks to the task list." + "\n\n"
												+ "Any additions are immediately saved into local file \"Tasks.txt\"." + "\n\n"
												+ "1. To add a FLOATING task:" + "\n"
												+ ">> add <TASK NAME>" + "\n\n"
												+ "2. To add a DEADLINE task:" + "\n"
												+ ">> add <TASK NAME> by~ <DATE>" + "\n\n"
												+ "3. To add a TIMED task:" + "\n"
												+ ">> add <TASK NAME> from~ <START DATE> to~ <DUE DATE>";
	private static final String MESSAGE_HELP_DELETE = "\nDeletes: \n"
													+ "a. Task from task list \n"
													+ "b. Start/Due date from specific task \n\n"
													+ "Any changes are immediately saved into local file \"Tasks.txt\".\n\n"
													+ "Deleting task from task list:\n\n"
													+ "1. To delete task using TASK NAME \n"
													+ ">> delete <TASK NAME> \n\n"
													+ "2. To delete task using TASK INDEX \n"
													+ ">> delete <TASK INDEX> \n";
	private static final String MESSAGE_HELP_CHANGE = "\nChanges details of tasks. \n\n"
													+ "Possible changes are: TASK NAME, START DATE and DUE DATE \n\n"
													+ "Any changes are immediately saved into local file \"Tasks.txt\". \n\n"
													+ "1. change TASK NAME of existing task \n"
													+ ">> change <TASK INDEX> to~ <NEW TASK NAME> \n\n"
													+ "2. change START DATE of existing task \n"
													+ ">> change start date to~ <NEW DATE> from~ <TASK INDEX> \n\n"
													+ "3. change DUE DATE of existing task \n"
													+ ">> change due date to~ <NEW DATE> from~ <TASK INDEX> \n\n";
	private static final String MESSAGE_HELP_COMPLETE = "\nMarks a task as complete. \n\n" 
													+ "Any changes are immediately saved into local file \"Tasks.txt\". \n\n"
													+ "1. mark a task as completed using TASK NAME \n"
													+ ">> complete <TASK NAME> \n\n"
													+ "2. mark a task as completed using TASK INDEX \n"
													+ ">> complete <TASK INDEX> \n\n";
	private static final String MESSAGE_HELP_SEARCH = "\nSearches for tasks that matches criteria and displays them. \n\n"
													+ "1. searching for tasks containing a certain keyword \n"
													+ ">> search <KEYWORD> \n\n";
	private static final String MESSAGE_HELP_GOTO = "\nChanges tasks displayed to those with the specified attached tag. \n\n"
													+ "1. change tag to \"all\". \n"
													+ ">> goto all \n\n"
													+ "2. change tag to \"search\". \n"
													+ ">> goto search \n\n"
													+ "3. change tag to \"uncompleted\". \n"
													+ ">> goto uncompleted \n\n"
													+ "4. change tag to \"completed\". \n"
													+ ">> goto completed \n\n";
	
	private static ArrayList<String> message;
	
	public ArrayList<String> generalHelp() {
		message = new ArrayList<String>();
		message.add(TITLE_GENERALHELP);
		message.add(MESSAGE_GENERALHELP);
		return message;
	}
	
	public ArrayList<String> addHelp() {
		message = new ArrayList<String>();
		message.add(TITLE_HELP_ADD);
		message.add(MESSAGE_HELP_ADD);
		return message;
	}
	
	public ArrayList<String> deleteHelp() {
		message = new ArrayList<String>();
		message.add(TITLE_HELP_DELETE);
		message.add(MESSAGE_HELP_DELETE);
		return message;
	}
	
	public ArrayList<String> changeHelp() {
		message = new ArrayList<String>();
		message.add(TITLE_HELP_CHANGE);
		message.add(MESSAGE_HELP_CHANGE);
		return message;
	}
	
	public ArrayList<String> completeHelp() {
		message = new ArrayList<String>();
		message.add(TITLE_HELP_COMPLETE);
		message.add(MESSAGE_HELP_COMPLETE);
		return message;
	}
	
	public ArrayList<String> searchHelp() {
		message = new ArrayList<String>();
		message.add(TITLE_HELP_SEARCH);
		message.add(MESSAGE_HELP_SEARCH);
		return message;
	}
	
	public ArrayList<String> gotoHelp() {
		message = new ArrayList<String>();
		message.add(TITLE_HELP_GOTO);
		message.add(MESSAGE_HELP_GOTO);
		return message;
	}
}

	// End of segment: E:\NUS\Modules\2014-2015 SEM1\CS2103T\Project\main\Project\edu\nus\comp\cs2103t\taskerino\common\Assist.java





	/**
	 * origin: E:\NUS\Modules\2014-2015 SEM1\CS2103T\Project\main\Project\edu\nus\comp\cs2103t\taskerino\common\Command.java
	 */

package edu.nus.comp.cs2103t.taskerino.common;

import java.util.ArrayList;

/**
 * 
 * This class serves to help with the Undo functionality by keeping track of the commands entered.
 */
public class Command {
	
	private String commandType;
	private int indexOfTaskModified;
	private DateAndTime dueDate;
	private DateAndTime startDate;
	private Task taskModified;
	private String nameOfTaskModified;
	private boolean statusOfTask;
	private String typeOfTaskModified;
	private ArrayList<Task> oldTaskList;
	
	public Command() {
	}
	
	public String getCommand() {
		return commandType;
	}
	
	public Task getTask() {
		return taskModified;
	}
	
	public int getIndexOfTaskModified() {
		return indexOfTaskModified;
	}
	
	public DateAndTime getDueDate() {
		return dueDate;
	}
	
	public DateAndTime getStartDate() {
		return startDate;
	}
	
	public boolean getStatusOfTask() {
		return statusOfTask;
	}
	
	public String getNameOfTaskModified() {
		return nameOfTaskModified;
	}
	
	public ArrayList<Task> getOldTaskList() {
		return oldTaskList;
	}
	public void setCommand(String command) {
		commandType = command;
	}
	
	public void setIndexOfTaskModified(int index) {
		indexOfTaskModified = index;
	}
	
	public void setTaskModified(Task task) {
		taskModified = task;
	}
	
	public void setDueDate(DateAndTime due) {
		dueDate = due;
	}
	
	public void setStartDate(DateAndTime start) {
		startDate = start;
	}
	
	public void setStatusOfTask(boolean status) {
		statusOfTask = status;
	}
	
	public void setNameOfTaskModified(String name) {
		nameOfTaskModified = name;
	}
	
	public void setOldTaskList(ArrayList<Task> taskList) {
		oldTaskList = taskList;
	}

	public String getTypeOfTaskModified() {
		return typeOfTaskModified;
	}

	public void setTypeOfTaskModified(String typeOfTaskModified) {
		this.typeOfTaskModified = typeOfTaskModified;
	}
}

	// End of segment: E:\NUS\Modules\2014-2015 SEM1\CS2103T\Project\main\Project\edu\nus\comp\cs2103t\taskerino\common\Command.java





	/**
	 * origin: E:\NUS\Modules\2014-2015 SEM1\CS2103T\Project\main\Project\edu\nus\comp\cs2103t\taskerino\common\Data.java
	 */


/** 
 *---------------------------------------------------------------------------------- DATA CLASS ----------------------------------------------------------------------------------
 *
 * This class handles any manipulation to the temporary list of task object.
 * 
 * Functions included within this class:
 * 
 * -addTask <addition of tasks to the list of tasks>
 * -removeTask <removal of specific task from list of tasks>
 * -getTask <retrieve specific task from list of tasks>
 * -searchTask <retrives the index of the the specific task from the list of tasks>
 * -updateTask <retrieves specific task and updates relevant fields>
 * -clearTask <removes all tasks within the existing task arraylist
 *
**/
package edu.nus.comp.cs2103t.taskerino.common;

import java.util.ArrayList;

public class Data {
	private static Controller controller = Controller.getController();
	
/*****************
 Static Variables 
******************/
	private static String command;	
	private static String input;	
	
	private static String description;	
	private static String newDescription;
	private static String searchedKeyWord;
	
	public static String addType;	
	public static String changeType;	
	public static String deleteType;	
	
	public static int fromDay;		
	public static int fromMonth;	
	public static int fromYear;	
	
	public static int toDay;		
	public static int toMonth;	
	public static int toYear;	
	
	public static int byDay;		
	public static int byMonth;	
	public static int byYear;
	
	public static ArrayList<Command> commandList = new ArrayList<Command>();
	public static ArrayList<Task> task;
	public static ArrayList<Task> searchedTasks = new ArrayList<Task>();
	public static ArrayList<Task> completedTasks = new ArrayList<Task>();
	public static ArrayList<Task> uncompletedTasks = new ArrayList<Task>();
	
	public static int taskIndexInList;
		
/*****************
     Getters 
******************/
	
	public static String getCommand(){
		return command;
	}
	
	public static String getInput(){
		return input;
	}
	
	public static String getDescription(){
		return description;
	}
	
	public static String getNewDescription(){
		return newDescription;
	}
	
	public static String getSearchedKeyWord(){
		return searchedKeyWord;
	}
	
	public static String getAddType(){
		return addType;
	}
	
	public static String getChangeType(){
		return changeType;
	}
	
	public static String getDeleteType(){
		return deleteType;
	}
	
	public static int getFromDay(){
		return fromDay;
	}
	
	public static int getFromMonth(){
		return fromMonth;
	}
	
	public static int getFromYear(){
		return fromYear;
	}
	
	public static int getToDay(){
		return toDay;
	}
	
	public static int getToMonth(){
		return toMonth;
	}
	
	public static int getToYear(){
		return toYear;
	}
	
	public static int getByDay(){
		return byDay;
	}
	
	public static int getByMonth(){
		return byMonth;
	}
	
	public static int getByYear(){
		return byYear;
	}
	
	public static int getTaskIndexInList(){
		return taskIndexInList;
	}
	
/*****************
      Setters 
******************/	
	
	public static void setCommand(String newCommand){
		command = newCommand;
	}
	
	public static void setInput(String newInput){
		input = newInput;
	}
	
	public static void setDescription(String newDescription){
		description = newDescription;
	}
	
	public static void setNewDescription(String newNewDescription){
		newDescription = newNewDescription;
	}
	
	public static void setSearchedKeyWord(String newSearchedKeyWord){
		searchedKeyWord = newSearchedKeyWord;
	}
	
	public static void setAddType(String newAddType){
		addType = newAddType;
	}
	
	public static void setChangeType(String newChangeType){
		changeType = newChangeType;
	}
	
	public static void setDeleteType(String newDeleteType){
		deleteType = newDeleteType;
	}

	public static void setFromDay(int newFromDay){
		fromDay = newFromDay;
	}

	public static void setFromMonth(int newFromMonth){
		fromMonth = newFromMonth;
	}

	public static void setFromYear(int newFromYear){
		fromYear = newFromYear;
	}

	public static void setToDay(int newToDay){
		toDay = newToDay;
	}

	public static void setToMonth(int newToMonth){
		toMonth = newToMonth;
	}

	public static void setToYear(int newToYear){
		toYear = newToYear;
	}

	public static void setByDay(int newByDay){
		byDay = newByDay;
	}

	public static void setByMonth(int newByMonth){
		byMonth = newByMonth;
	}

	public static void setByYear(int newByYear){
		byYear = newByYear;
	}
	
	public static void setTaskIndexInList(int newTaskIndexInList){
		taskIndexInList = newTaskIndexInList;
	}
	
/*****************
     Functions 
******************/	
	
	/**
	 * Clear all attributes.
	 */
	public static void resetAll() {
		command = "";	
		input = "";	
		description = "";	
		newDescription = "";
		
		taskIndexInList = -1;
		
		addType = "";	
		changeType = "";	
		
		fromDay = -1;		
		fromMonth = -1;	
		fromYear = -1;	
		
		toDay = -1;		
		toMonth = -1;	
		toYear = -1;	
		
		byDay = -1;		
		byMonth = -1;	
		byYear = -1;
	}

	/**
	 * Adds task into the temporary arraylist
	 */
	public static void addTask(Task newTask) {
		Data.task.add(newTask);
	}
	
	/**
	 * Searches for task and removes it
	*/
	public static boolean removeTask(Task task) throws ArrayIndexOutOfBoundsException {
		return Data.task.remove(task);
	}
	
	/**
	 * Clear all task from existing list
	*/
	public static void clearTask() {
		Data.task.clear();
	}
	
	/**
	 * Updates task's relevant fields
	*/
	public static void updateTask(Task task, String newDescription) {
		task.setTaskName(newDescription);
	}
	
	/**
	 * Searches for task and if task exists, return the index of task. If not, return -1
	*/
	private static int searchTask(String description) {
		int indexOfTask = -1;
		ArrayList<Task> targetList;
		try {
			targetList = controller.getUserTasks();
		} catch (NullPointerException e) {
			// only occur when doing unit testing as GUIComponents is not initialized
			targetList = Data.task;
		}
		
		for(int i = 0; i < targetList.size(); i++) {
			if(targetList.get(i).getTaskName().equals(description)) {
				indexOfTask = i;
			}
		}
		return indexOfTask;
	}
	
	/**
	 * Searches for task based on Description and returns the specific task
	*/	
	public static Task getTask(String description) {
		int indexOfTask = searchTask(description);
		if(indexOfTask != -1) {
			taskIndexInList = indexOfTask;
			
			ArrayList<Task> targetList;
			try {
				targetList = controller.getUserTasks();
			} catch (NullPointerException e) {
				// only occur when doing unit testing as GUIComponents is not initialized
				targetList = Data.task;
			}
			
			return targetList.get(indexOfTask);
		}
		return null;
	}	

}
	// End of segment: E:\NUS\Modules\2014-2015 SEM1\CS2103T\Project\main\Project\edu\nus\comp\cs2103t\taskerino\common\Data.java





	/**
	 * origin: E:\NUS\Modules\2014-2015 SEM1\CS2103T\Project\main\Project\edu\nus\comp\cs2103t\taskerino\common\DataTest.java
	 */

package edu.nus.comp.cs2103t.taskerino.common;

import static org.junit.Assert.*;

import java.util.ArrayList;

import org.junit.Test;

public class DataTest {

	@Test
	public void testAddTask() {
		Task testTask = new Task();
		testTask.setTaskName("test");
		ArrayList<Task> test = new ArrayList<Task>();
		test.add(testTask);
		Data.task = new ArrayList<Task>();
		Data.addTask(testTask);
		assertEquals(test, Data.task);
	}

	@Test
	public void testRemoveTask() {
		Task testTask = new Task();
		testTask.setTaskName("test");
		ArrayList<Task> test = new ArrayList<Task>();
		Data.task = new ArrayList<Task>();
		Data.addTask(testTask);
		Data.removeTask(testTask);
		assertEquals(test, Data.task);
	}

	@Test
	public void testUpdateTask() {
		Task testTask = new Task();
		Task modifiedTask = new Task();
		testTask.setTaskName("test");
		modifiedTask.setTaskName("modifiedTask");
		ArrayList<Task> test = new ArrayList<Task>();
		test.add(modifiedTask);
		Data.task = new ArrayList<Task>();
		Data.addTask(testTask);
		Data.updateTask(testTask, "modifiedTask");
		assertEquals(test.get(0).getTaskName(), Data.task.get(0).getTaskName());
	}

	@Test
	public void testGetTask() {
		Data.task = new ArrayList<Task>();
		Task testTask = new Task();
		Task modifiedTask = new Task();
		testTask.setTaskName("test");
		modifiedTask.setTaskName("modifiedTask");
		Data.addTask(testTask);
		Data.addTask(modifiedTask);
		assertEquals(modifiedTask, Data.getTask("modifiedTask"));
	}

}

	// End of segment: E:\NUS\Modules\2014-2015 SEM1\CS2103T\Project\main\Project\edu\nus\comp\cs2103t\taskerino\common\DataTest.java





	/**
	 * origin: E:\NUS\Modules\2014-2015 SEM1\CS2103T\Project\main\Project\edu\nus\comp\cs2103t\taskerino\storage\TaskerinoIO.java
	 */

/** 
 *---------------------------------------------------------------------------------- STORAGE CLASS ----------------------------------------------------------------------------------
 * 
 *
 * This class handles the storing and retrieving of existing tasks from the local file "Tasks.txt".
 *
 * It has the following operations:
 *
 * -loadTasksFromFile <retrieves list of tasks (JSON format) from local file and converts it into ArrayList<Task> for easy manipulation>
 * -saveTasksIntoFile <converts ArrayList<Task> to (JSON format) String and store it in local file "Tasks.txt">
 *
 *
**/
package edu.nus.comp.cs2103t.taskerino.storage;

import java.util.ArrayList;
import java.lang.reflect.Type;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;

import com.google.gson.*;
import com.google.gson.reflect.TypeToken;

import edu.nus.comp.cs2103t.taskerino.common.*;


public class TaskerinoIO {
	/**
	 * Use Gson library and BufferedReader to load content in local file into temporary arraylist of task objects
	*/
	public static ArrayList<Task> loadTasksFromFile() throws IOException, JsonSyntaxException {
		Gson gson = new Gson();
		String jsonTasks = "";
		try {
			BufferedReader reader = new BufferedReader(new FileReader("Tasks.txt"));
			String line = null;
			while ((line = reader.readLine()) != null) {
				jsonTasks = line;
			}
			Type type = new TypeToken<ArrayList<Task>>() {
        		}.getType();
        	ArrayList<Task> taskList = gson.fromJson(jsonTasks, type);
        	reader.close();
        	return taskList;
		} catch(IOException e) {
			return new ArrayList<Task>();
		}
	}
	
	/**
	 * Use Gson library and PrintWriter to save content in temporary arraylist into the local file in JSON format
	*/
	public static void saveTasksIntoFile() throws FileNotFoundException, UnsupportedEncodingException {
		Gson gson = new Gson();
		String jsonTasks = gson.toJson(Data.task);
		PrintWriter writer = new PrintWriter("Tasks.txt", "UTF-8");
		writer.println(jsonTasks);
		writer.close();
	}
}

	// End of segment: E:\NUS\Modules\2014-2015 SEM1\CS2103T\Project\main\Project\edu\nus\comp\cs2103t\taskerino\storage\TaskerinoIO.java





